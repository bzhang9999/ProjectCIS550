{"ast":null,"code":"var _jsxFileName = \"/Users/bzhang99/Desktop/upenn/2020fall/CIS450/ProjectCIS550/project/client/src/components/Dashboard.js\";\nimport React from 'react';\nimport '../style/Dashboard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PageNavbar from './PageNavbar'; //import GenreButton from './GenreButton';\n\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nconst containerStyle = {\n  position: 'absolute',\n  width: '85%',\n  height: '80%',\n  top: 260,\n  left: 100\n};\nconst divStyle = {\n  display: 'flex',\n  alignItems: 'center'\n};\nexport class Dashboard extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.displayMarkers1 = () => {\n      return this.state.side1position.map((obj, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: obj.lat,\n            lng: obj.lng\n          },\n          deaths: obj.deaths,\n          realName: obj.realName,\n          onClick: this.onMarkerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 14\n          }\n        });\n      });\n    };\n\n    this.displayMarkers2 = () => {\n      return this.state.side2position.map((obj, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: obj.lat,\n            lng: obj.lng\n          },\n          deaths: obj.deaths,\n          realName: obj.realName,\n          icon: {\n            url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n          },\n          onClick: this.onMarkerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 14\n          }\n        });\n      });\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      displayWindow: true,\n      selectedMarker: marker,\n      selectedPlace: props\n    });\n\n    this.state = {\n      allConflicts: [],\n      side1codes: [],\n      side1position: [],\n      side2codes: [],\n      side2position: [],\n      displayWindow: true,\n      selectedMarker: {},\n      selectedPlace: {},\n      selectedConflict: {}\n    };\n    this.showOnMap = this.showOnMap.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  } // React function that is called when the page load.\n\n\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    fetch(\"http://localhost:8081/conflicts\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => res.json()) // Convert the response data to a JSON.\n    .then(conflictList => {\n      if (!conflictList) return; // let conflictDivs = conflictList.map((conflictObj, i) =>\n      //   <GenreButton id={\"button-\" + conflictObj.name} onClick={() => this.showOnMap(conflictObj.name)} name={conflictObj.name} />\n      // );\n\n      let conflictDivs = conflictList.map((conflictObj, i) => /*#__PURE__*/React.createElement(\"option\", {\n        value: conflictObj.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, conflictObj.name));\n      this.setState({\n        // allConflicts: conflictDivs\n        allConflicts: conflictDivs\n      });\n    }).catch(err => console.log(err)); // Print the error if there is one.\n  }\n\n  showOnMap(conflict) {\n    this.setState({\n      side1position: [],\n      side2position: []\n    });\n    let route = \"http://localhost:8081/conflicts/\" + conflict;\n    fetch(route, {\n      method: 'GET'\n    }).then(res => res.json()).then(countryList => {\n      if (!countryList) {\n        console.log(\"problem with response\");\n        return;\n      }\n\n      let countryUrls = async () => {\n        for (var i = 0; i < countryList.length; i++) {\n          var cCode = countryList[i].Country;\n          let geoCodeRoute = \"https://maps.googleapis.com/maps/api/geocode/json?components=country:\" + cCode + \"%7C&key=AIzaSyC4uWVv0o6wzhqyPCf5H6BnRFbNfU79KqM\";\n          var cdeaths = countryList[i].num_deaths;\n          var cside = countryList[i].side;\n          var realName = countryList[i].RealName;\n          await fetch(geoCodeRoute, {\n            method: 'GET'\n          }).then(res => res.json()).then(resultList => {\n            if (!resultList) {\n              console.log(\"ResultList empty!\");\n              return;\n            }\n\n            var lat = resultList[\"results\"][0].geometry.location.lat;\n            var lng = resultList[\"results\"][0].geometry.location.lng;\n\n            if (cside == 1) {\n              this.setState({\n                side1position: [...this.state.side1position, {\n                  lat: lat,\n                  lng: lng,\n                  deaths: cdeaths,\n                  realName: realName\n                }]\n              });\n            } else if (cside == 2) {\n              this.setState({\n                side2position: [...this.state.side2position, {\n                  lat: lat,\n                  lng: lng,\n                  deaths: cdeaths,\n                  realName: realName\n                }]\n              });\n            }\n          }).catch(err => console.log(err));\n        }\n      };\n\n      countryUrls();\n    }).catch(err => console.log(err));\n  }\n\n  handleChange(e) {\n    this.setState({\n      selectedConflict: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container bestgenres-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 12\n      }\n    }, \"Explore Conflicts\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdowns-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"countryDropdown1-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedConflict,\n      onChange: this.handleChange,\n      className: \"dropdown\",\n      id: \"countryDropdown1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      select: true,\n      value: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, \" -- Select A Conflict -- \"), this.state.allConflicts), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-btn\",\n      id: \"SubmitBtn\",\n      onClick: () => this.showOnMap(this.state.selectedConflict),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, \" Submit\"))))), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 3,\n      initialCenter: {\n        lat: 30,\n        lng: -20\n      },\n      containerStyle: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, this.displayMarkers1(), this.displayMarkers2(), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.selectedMarker,\n      visible: this.state.displayWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, this.state.selectedPlace.realName), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    }, \"Deaths: \", this.state.selectedPlace.deaths)))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyC4uWVv0o6wzhqyPCf5H6BnRFbNfU79KqM\"\n})(Dashboard);","map":{"version":3,"sources":["/Users/bzhang99/Desktop/upenn/2020fall/CIS450/ProjectCIS550/project/client/src/components/Dashboard.js"],"names":["React","PageNavbar","Map","InfoWindow","Marker","GoogleApiWrapper","containerStyle","position","width","height","top","left","divStyle","display","alignItems","Dashboard","Component","constructor","props","displayMarkers1","state","side1position","map","obj","index","lat","lng","deaths","realName","onMarkerClick","displayMarkers2","side2position","url","marker","e","setState","displayWindow","selectedMarker","selectedPlace","allConflicts","side1codes","side2codes","selectedConflict","showOnMap","bind","handleChange","componentDidMount","fetch","method","then","res","json","conflictList","conflictDivs","conflictObj","i","name","catch","err","console","log","conflict","route","countryList","countryUrls","length","cCode","Country","geoCodeRoute","cdeaths","num_deaths","cside","side","RealName","resultList","geometry","location","target","value","render","google","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../style/Dashboard.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PageNavbar from './PageNavbar';\n//import GenreButton from './GenreButton';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nconst containerStyle = {\n    position: 'absolute',  \n    width: '85%',\n    height: '80%',\n    top: 260,\n    left: 100\n}\n\nconst divStyle = {\n    display: 'flex',\n    alignItems: 'center'\n};\n\n\nexport class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    \n\n    this.state = {\n      allConflicts: [],\n      side1codes: [],\n      side1position: [],\n      side2codes: [],\n      side2position: [],\n\n      displayWindow: true,\n      selectedMarker: {},\n      selectedPlace: {},\n\n      selectedConflict: {}\n    }\n\n    this.showOnMap = this.showOnMap.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // React function that is called when the page load.\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    fetch(\"http://localhost:8081/conflicts\", {\n      method: 'GET' // The type of HTTP request.\n    })\n      .then(res => res.json()) // Convert the response data to a JSON.\n      .then(conflictList => {\n        if (!conflictList) return;\n        // let conflictDivs = conflictList.map((conflictObj, i) =>\n        //   <GenreButton id={\"button-\" + conflictObj.name} onClick={() => this.showOnMap(conflictObj.name)} name={conflictObj.name} />\n        // );\n\n        let conflictDivs = conflictList.map((conflictObj, i) =>\n          <option value ={conflictObj.name}>{conflictObj.name}</option>        \n        );\n        \n\n\n        this.setState({\n          // allConflicts: conflictDivs\n          allConflicts: conflictDivs\n        })\n      })\n      .catch(err => console.log(err)) // Print the error if there is one.\n  }\n\n\n\n  showOnMap(conflict) {\n     this.setState({\n          side1position: [],\n          side2position: []\n        })\n    let route = \"http://localhost:8081/conflicts/\" + conflict;\n    fetch(route, {\n      method: 'GET'\n    })\n      .then(res => res.json())\n      .then(countryList => {\n        if (!countryList) {\n          console.log(\"problem with response\");\n          return;\n        }\n\n        let countryUrls = async() => {\n          for (var i=0; i<countryList.length; i++) {\n            var cCode = countryList[i].Country;\n            let geoCodeRoute = \"https://maps.googleapis.com/maps/api/geocode/json?components=country:\" + \n            cCode+ \"%7C&key=AIzaSyC4uWVv0o6wzhqyPCf5H6BnRFbNfU79KqM\";\n\n            var cdeaths = countryList[i].num_deaths;\n            var cside = countryList[i].side;\n            var realName = countryList[i].RealName;\n\n            await fetch(geoCodeRoute, {\n              method: 'GET'\n            })\n            .then(res => res.json())\n            .then(resultList => {\n              if (!resultList) {\n                console.log(\"ResultList empty!\");\n                return;\n              }\n\n              var lat = resultList[\"results\"][0].geometry.location.lat;\n              var lng = resultList[\"results\"][0].geometry.location.lng;\n\n              if (cside == 1) {\n                this.setState({side1position:[...this.state.side1position, {lat: lat, lng: lng, deaths: cdeaths, realName: realName}]\n                });\n              }\n              else if (cside == 2) {\n                this.setState({side2position:[...this.state.side2position, {lat: lat, lng: lng, deaths: cdeaths, realName: realName}]\n                });\n              }\n\n            })\n              .catch(err => console.log(err))\n          }\n        }\n        countryUrls();\n      }).catch(err => console.log(err))\n  }\n\n  displayMarkers1 = () => {\n    return this.state.side1position.map((obj, index) => {\n      return <Marker \n      key={index} \n      id={index} \n      position={{lat: obj.lat, lng: obj.lng}}\n      deaths={obj.deaths}\n      realName={obj.realName}\n      onClick={this.onMarkerClick} />\n    })\n  }\n\n  displayMarkers2 = () => {\n    return this.state.side2position.map((obj, index) => {\n      return <Marker \n      key={index} \n      id={index} \n      position={{lat: obj.lat, lng: obj.lng}}\n      deaths={obj.deaths}\n      realName={obj.realName}\n      icon={{url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"}}\n      onClick={this.onMarkerClick}/>\n    })\n  }\n\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      displayWindow: true,\n      selectedMarker: marker,\n      selectedPlace: props\n  });\n\n  handleChange(e) {\n    this.setState({\n      selectedConflict: e.target.value\n    })\n  }\n\n  render() {    \n    return (\n\n      <div className=\"Dashboard\">\n\n\n\n        <PageNavbar active=\"dashboard\" />\n\n         <div className=\"container bestgenres-container\">\n\n\t\t\t      <div className=\"jumbotron1\">\n\t\t\t        <div className=\"h5\">Explore Conflicts</div>\n\n                <div className=\"dropdowns-container\">\n                  <div className=\"countryDropdown1-container\">\n                 \n                    <select value={this.state.selectedConflict} onChange={this.handleChange} className=\"dropdown\" id=\"countryDropdown1\">\n                        <option select value> -- Select A Conflict -- </option>\n                          {this.state.allConflicts}\n                    </select>\n\n                    <button className=\"submit-btn\" id=\"SubmitBtn\" onClick={() => this.showOnMap(this.state.selectedConflict)}> Submit</button>\n                  </div>\n                </div>\n\n            </div>\n         </div>\n\n\n        <Map google={this.props.google} zoom={3} initialCenter={{lat: 30,lng: -20}} containerStyle={containerStyle}>\n\n          {this.displayMarkers1()}\n          {this.displayMarkers2()}\n          \n          <InfoWindow\n            marker={this.state.selectedMarker}\n            visible={this.state.displayWindow}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.realName}</h4>\n              <h4>Deaths: {this.state.selectedPlace.deaths}</h4>\n            </div>\n          </InfoWindow>\n\n        </Map>\n         \n\n      </div>\n    )\n\n  }\n\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyC4uWVv0o6wzhqyPCf5H6BnRFbNfU79KqM\")\n})(Dashboard)\n"]},"metadata":{},"sourceType":"module"}